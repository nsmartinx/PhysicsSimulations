from direct.showbase.ShowBase import ShowBase
from direct.showbase.DirectObject import DirectObject
from direct.gui.DirectGui import *
from direct.interval.IntervalGlobal import *
from panda3d.core import ClockObject, GeomVertexFormat, GeomVertexData, Geom, GeomTriangles, GeomVertexWriter,GeomNode, PerspectiveLens, LVector3, LPoint3d, WindowProperties, ClockObject, Thread, LVector3f
from math import cos, pi, sqrt, sin
from array import *
 
from panda3d.core import PerspectiveLens, WindowProperties
import sched, time, threading, math
from direct.task import Task
from datetime import datetime

from panda3d.core import LPlanef, LPoint3f
 
from panda3d.core import loadPrcFileData
 
confVars = """
win-size 1280 720
show-frame-rate-meter True
"""
 
loadPrcFileData("", confVars)
 
global moveSpeed
global mouseSensitivity
moveSpeed = float(1000)
mouseSensitivity = float(50)

global fps
fps = 240
 
class Cube:
    def __init__(self, x, y, z):
        def makeSquare(x1, y1, z1, x2, y2, z2, r, g, b, a):
            format = GeomVertexFormat.getV3cp()
            vdata = GeomVertexData('square', format, Geom.UHDynamic)
            vertex = GeomVertexWriter(vdata, 'vertex')
            color = GeomVertexWriter(vdata, 'color')
 
            # make sure we draw the sqaure in the right plane
            if x1 != x2:
                vertex.addData3(x1, y1, z1)
                vertex.addData3(x2, y1, z1)
                vertex.addData3(x2, y2, z2)
                vertex.addData3(x1, y2, z2)
 
            else:
                vertex.addData3(x1, y1, z1)
                vertex.addData3(x2, y2, z1)
                vertex.addData3(x2, y2, z2)
                vertex.addData3(x1, y1, z2)
 
            # adding different colors to the vertex for visibility
            color.addData4f(r, g, b, a)
            color.addData4f(r, g, b, a)
            color.addData4f(r, g, b, a)
            color.addData4f(r, g, b, a)
 
            # Quads aren't directly supported by the Geom interface
            # you might be interested in the CardMaker class if you are
            # interested in rectangle though
            tris = GeomTriangles(Geom.UHDynamic)
            tris.addVertices(0, 1, 3)
            tris.addVertices(1, 2, 3)
 
            square = Geom(vdata)
            square.addPrimitive(tris)
            return square
        # Note: it isn't particularly efficient to make every face as a separate Geom.
        # instead, it would be better to create one Geom holding all of the faces.
        
        square0 = makeSquare(0, 0, 0, 0, y, z, 1, 0, 1, 1)
        square1 = makeSquare(0, 0, 0, x, 0, z, 1, 1, 0, 1)
        square2 = makeSquare(0, 0, 0, x, y, 0, 1, 0, 0, 1)
        square3 = makeSquare(x, y, z, x, 0, 0, 1, 0, 1, 1)
        square4 = makeSquare(x, y, z, 0, y, 0, 1, 1, 0, 1)
        square5 = makeSquare(x, y, z, 0, 0, z, 1, 0, 0, 1)
        
        self.points = []
        self.points.append(LPoint3f(0,0,0))
        self.points.append(LPoint3f(0, y, z))
        self.points.append(LPoint3f(x, 0, z))
        self.points.append(LPoint3f(x, y, 0))
        self.points.append(LPoint3f(x, y, z))
        self.points.append(LPoint3f(x, 0, 0))
        self.points.append(LPoint3f(0, y, 0))
        self.points.append(LPoint3f(0, 0, z))
        
        snode = GeomNode('square')
        snode.addGeom(square0)
        snode.addGeom(square1)
        snode.addGeom(square2)
        snode.addGeom(square3)
        snode.addGeom(square4)
        snode.addGeom(square5)
        cube = render.attachNewNode(snode)
        cube.setTwoSided(True)
        self.cubeModel = cube
        self.cubeModel.setPos(0,0,0)

        self.mass = 10
        self.rotationalVelocity = (0,0,0)
        self.velocity = LVector3(0, 0, 0)
        self.gravity = LVector3(0, 0, -100)
        self.acceration = LVector3(0, 0, 0)
        self.friction = LVector3(0, 0, 0)
        self.position = LVector3(0, 0, 0)
        
    def setPos(self, x, y, z):
        self.cubeModel.setPos(x, y, z)
        self.position = LVector3(x, y, z)
    
    def setHpr(self, h, p, r):
        return self.cubeModel.setHpr(h, p, r)
        
class Sphere:
    def __init__(self, x, y, z, r, p, m): #x, y, z are the coordinates of the centre of the sphere, r is the radius, p is the precision (number of points in a semicircle). Minimum value of p is 2. m is the mass
        self.velocity = LVector3(0, 0, 0)
        self.acceration = LVector3(0, 0, 0)
        self.radius = r
        self.mass = m
        self.position = LVector3(x, y, z)
        self.gravity = LVector3(0, 0, -100)
       
        sphere = list()#this will be a list of lists of points. Each of the lists of points will be one semicircle of the sphere.
        for i in range(2 * p):#each semi circle
            semicircle = [LPoint3d(0, 0, 0)] * (p - 1) #creates a list of points and sets them all to equal zero
            for j in range(p - 1): #each point within the semi circle
                ang1 = pi * (i / p)#two component angles of position on sphere
                ang2 = (pi / 2) - pi * ((j + 1) / p)
                semicircle[j] = LPoint3d((r * cos(ang2) * cos(ang1)), (r * cos(ang2) * sin(ang1)), (r * sin(ang2)))#calculates the x, y, and z values of the point represented by the two angles
            sphere.append(semicircle)#adds the semicircle of points to the sphere
           
        snode = GeomNode('sphere')#creates an empty geomnode that will contain the sphere
        for i in range(2 * p):#creates quadrilaterals for every point on the sphere
            for j in range(p - 2):
                o = i + 1
                if (o >= 2 * p):
                    o = 0
                snode.addGeom(Collision.makeQuadrilateral(self, sphere[i][j], sphere[i][j + 1], sphere[o][j + 1], sphere[o][j]))
               
        #the top and bottom points of the sphere have not been added yet
        top = LPoint3d(0, 0, r) #top point
        bottom = LPoint3d(0, 0, -r) # bottom point
        for i in range(2 * p): #adds triangles betweent the top/bottom point and all neighbooring points
            o = i + 1
            if (o >= 2 * p):
                o = 0
            snode.addGeom(Collision.makeQuadrilateral(self, top, sphere[i][0], top, sphere[o][0])) #because the first and third are both top, only a triangle will be generated
            snode.addGeom(Collision.makeQuadrilateral(self, bottom, sphere[i][p - 2], bottom, sphere[o][p - 2]))
           
        #render the sphere to the screen
        sphereObject = render.attachNewNode(snode)
        sphereObject.setTwoSided(True)
        self.sphereModel = sphereObject
       
        self.sphereModel.setPos(x, y, z)#changes the position of the sphere to the inputted location, Important not to generate the sphere at the desired location as the reference point will always start at (0, 0, 0). Generating the sphere at the origin then moving it after fixes this.
         
    def updatePosition(self, time): #call this from the physics update function, will automatically move the sphere the amount specified by the velocity. If you want to add acceleration, use this same code except with acceleration/velocity instead of velocity/position
        global fps
        self.position = (self.sphereModel.getPos() + self.velocity * time)
        self.sphereModel.setPos(self.position)
       
class Collision(ShowBase):
    def __init__(self):
    
        ShowBase.__init__(self)  
       
        lens = PerspectiveLens()
        base.setFrameRateMeter(True)
       
        Collision.movement(self)
        self.scene = self.loader.loadModel("models/environment")
        self.scene.reparentTo(self.render)
        self.scene.setScale(0.25, 0.25, 0.25)
        self.scene.setPos(-8, 42, 0)
        
        global t, fps, sphere0, cube0, clock, previousTime
        
        sphere0 = Sphere(0, 0, 100, 5, 5, 10)
        cube0 = Cube(100, 10, 10)
        cube0.setPos(50, 0, 150)
        
        clock = ClockObject()
        previousTime = 0
        angle = 45

        self.taskMgr.doMethodLater(1/fps, self.physicsUpdate, 'physics')
        
    def physicsUpdate(self, task):
        
        global cube0, sphere0, clock, previousTime
        
         #calculating time passsed since last calculation
        frameTime = clock.get_real_time() - previousTime
        previousTime = clock.get_real_time()

        #finding current velocity going in the direction of travel perpendicular to the string
        ftDir = cube0.position - sphere0.position
        fg = sphere0.gravity * sphere0.mass
        fgy = fg.project(-ftDir)
        ft = -fgy
        fgx = fg - fgy
        
        #find acceration from forces
        sphere0.acceration = fgx/sphere0.mass + fgy/sphere0.mass + ft/sphere0.mass
        
        #calculate new velocity
        curVelocity = sphere0.velocity.project(fgx)
        sphere0.velocity = (curVelocity.normalized() * sphere0.velocity.length()) + (sphere0.acceration * frameTime)
        
        sphere0.updatePosition(frameTime)
        
        return task.again
 
    def makeQuadrilateral(self, point1, point2, point3, point4): #input the four points (LPoint3d) that a quadrilateral will be drawn between. Ensure that the four points make a U shape if you were to draw a line between them (Not an N or X shape)
            format = GeomVertexFormat.getV3cp() #this format contains vertex location and colour of the vertex
            vdata = GeomVertexData('square', format, Geom.UHDynamic)

            vertex = GeomVertexWriter(vdata, 'vertex')#writers for the vertex and the colour
            colour = GeomVertexWriter(vdata, 'color')


            for point in [point1, point2, point3, point4]:
                vertex.addData3(point[0], point[1], point[2]) #adds the position of the four vertexes


            # adding different colors to the vertex for visibility. These colours are expressed in RGBA.
            colour.addData4f(0, 0, 1, 1)
            colour.addData4f(0, 0, 1, 1)
            colour.addData4f(0, 0.5, 1, 1)
            colour.addData4f(0.5, 0, 1, 1)


            tris = GeomTriangles(Geom.UHDynamic) #creates two triangles to represent the quadrilateral
            tris.addVertices(0, 1, 3)
            if(point1 != point3): #if points 1 and 3 are the same, it will only generate one triangle
                tris.addVertices(1, 2, 3)


            square = Geom(vdata)
            square.addPrimitive(tris)#combines the triangles into one quadrilateral
           
            return square
  
    def movement(self):
        self.xray_mode = False
        self.show_model_bounds = False
       
        base.disableMouse() #disables default mouse control
       
        props = WindowProperties()
        props.setCursorHidden(True) #hides the cursor
        base.win.requestProperties(props)
       
        # Setup controls
        self.keys = {}
        for key in ['a', 'd', 'w', 's', 'c', 'space']:
            self.keys[key] = 0 #array that stores the state of the above keys (1 is pressed down, 0 is not)
            self.accept(key, self.push_key, [key, 1])
            self.accept('shift-%s' % key, self.push_key, [key, 1]) #if the key is pressed or the key is pressed with shift, it will be registered
            self.accept('%s-up' % key, self.push_key, [key, 0])
        self.accept('escape', __import__('sys').exit, [0]) #closes program if escape is pressed
 
        # Setup camera
        self.lens = PerspectiveLens()
        self.lens.setFov(60)
        self.lens.setNear(0.01)
        self.lens.setFar(1000.0)
        #self.cam.node().setLens(self.lens)
        self.heading = 0.0
        self.pitch = 0.0
 
        self.taskMgr.add(self.update, 'main loop')
 
    def push_key(self, key, value):
        self.keys[key] = value
 
    def update(self, task):
        mw = base.mouseWatcherNode
        x = 0
        y = 0
        if mw.hasMouse():
        # get the position relative to centre
            x, y = mw.getMouseX(), mw.getMouseY()
 
        # move mouse back to center
            props = base.win.getProperties()
            base.win.movePointer(0, props.getXSize() // 2, props.getYSize() // 2)
       
       
        delta = globalClock.getDt()
        move_x = delta * moveSpeed * self.keys['d'] - delta * moveSpeed * self.keys['a']
        move_z = delta * moveSpeed * self.keys['w'] - delta * moveSpeed * self.keys['s']
        move_y = delta * moveSpeed * self.keys['space'] - delta * moveSpeed * self.keys['c']
        self.camera.setPos(self.camera, move_x, move_z, move_y)
        self.heading += (-x * mouseSensitivity)
        if (self.pitch + y * mouseSensitivity > 90):
            self.pitch = 90
        elif (self.pitch + y * mouseSensitivity < -90):
            self.pitch = -90
        else:
            self.pitch += (y * mouseSensitivity)
        self.camera.setHpr(self.heading, self.pitch, 0)
        return task.cont  


Collision().run()